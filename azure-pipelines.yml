trigger:
  branches:
    include:
      - develop
      - feature/**
      - release/**
      - master
      - hotfix/**

pr:
  branches:
    include:
      - develop
      - master

pool:
  name: 'Default' # Use self-host agent pool named 'Default'

variables:
  nodeVersion: '22.x'

resources:
  - repo: self

stages:
  - stage: DevelopmentStage
    displayName: Development stage 

    jobs:
      - job: DevelopmentJob
        displayName: Development job

        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Npm@1
            displayName: Install pnpm 
            inputs:
              command: custom
              verbose: false
              customCommand: 'install -g pnpm'

          - script: pnpm i 
            displayName: 'Install dependencies'

          - script: pnpm run lint 
            displayName: 'Lint'

          - script: pnpm run build 
            displayName: 'Build'

          - script: pnpm run test 
            displayName: 'Test'

      - job: PublishJob
        displayName: PublishJob
        dependsOn: DevelopmentJob
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))

        steps:
          - task: PowerShell@2
            displayName: Generate build version
            inputs:
              targetType: inline
              script: |
                Write-Host "Generating build version..."

                $buildVersion = (Get-Date).ToString("yy.MMdd") + ".$(Build.BuildId)"
                Write-Host "##vso[task.setvariable variable=BuildVersion]$buildVersion"

                Write-Host "Generated Build Version: $buildVersion"     
          
          - task: PowerShell@2
            displayName: Update package.json version 
            inputs:
              targetType: inline
              script: |
                Write-Host "Updating package.json version..."

                $packageJsonPath = "$(System.DefaultWorkingDirectory)/package.json"
                $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
                $packageJson.version = "$(BuildVersion)"
                $packageJson | ConvertTo-Json -Depth 32 | Set-Content $packageJsonPath

                Write-Host "Updated package.json version to $(BuildVersion)"

          - task: NodeTool@0
            displayName: 'Install Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Npm@1
            displayName: Install pnpm 
            inputs:
              command: custom
              verbose: false
              customCommand: 'install -g pnpm'

          - script: pnpm i
            displayName: 'Install dependencies'

          - script: pnpm run build
            displayName: 'Build'

          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            inputs:
              targetPath: $(Build.SourcesDirectory)/artifacts
              artifact: 'RichillCapital.SharedKernel-$(BuildVersion)'
              publishLocation: 'pipeline'

  - stage: ReleaseStage
    displayName: Release stage 
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))

    jobs:
      - job: ReleaseJob
        displayName: Release job

        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: PowerShell@2
            displayName: Generate release version 
            inputs:
              targetType: inline
              script: |
                Write-Host "Generating release version from branch: $(Build.SourceBranch)"

                $branchName = "$(Build.SourceBranchName)"
                Write-Host "##vso[task.setvariable variable=ReleaseVersion]$branchName"
                
                Write-Host "Generated Release Version: $branchName"
          
          - task: PowerShell@2
            displayName: Update package.json version 
            inputs:
              targetType: inline
              script: |
                Write-Host "Updating package.json version..."

                $packageJsonPath = "$(System.DefaultWorkingDirectory)/package.json"
                $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
                $packageJson.version = "$(ReleaseVersion)"
                $packageJson | ConvertTo-Json -Depth 32 | Set-Content $packageJsonPath

                Write-Host "Updated package.json version to $(ReleaseVersion)"

          - task: Npm@1
            displayName: Install pnpm 
            inputs:
              command: custom
              verbose: false
              customCommand: 'install -g pnpm'

          - script: pnpm i
            displayName: 'Install dependencies'

          - script: pnpm run build
            displayName: 'Build'

          - task: PublishPipelineArtifact@1
            displayName: Publish pipeline artifact
            inputs:
              targetPath: $(Build.SourcesDirectory)/artifacts
              artifact: 'RichillCapital.SharedKernel-$(ReleaseVersion)'
              publishLocation: 'pipeline'

  - stage: ProductionStage
    displayName: Production stage 
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
    dependsOn: DevelopmentStage
    jobs:
      - job: ProductionJob
        displayName: Production job
        steps:
          - task: PowerShell@2
            displayName: Generate release version from latest release branch
            inputs:
              targetType: inline
              script: |
                git fetch --all 

                $branches = git branch -r | Where-Object { $_ -match 'origin/release/\d+\.\d+\.\d+' }
                
                if (-not $branches) {
                    Write-Error "No matching branches found."
                    exit 1
                }                

                $versions = $branches |
                ForEach-Object {
                    if ($_ -match 'origin/release/(\d+\.\d+\.\d+)') {
                        [PSCustomObject]@{
                            BranchName = $_.Trim()
                            Version = [System.Version]$matches[1]
                        }
                    }
                }
                
                $latestBranch = $versions |
                    Sort-Object -Property Version -Descending |
                    Select-Object -First 1

                if ($latestBranch) {
                    Write-Host "##vso[task.setvariable variable=ReleaseVersion]$($latestBranch.Version)"
                    Write-Host "Generated release version: $($latestBranch.Version)"
                } else {
                    Write-Error "Failed to find the latest release branch."
                    exit 1
                }                
          
          - task: PowerShell@2
            displayName: Update package.json version 
            inputs:
              targetType: inline
              script: |
                Write-Host "Updating package.json version..."

                $packageJsonPath = "$(System.DefaultWorkingDirectory)/package.json"
                $packageJson = Get-Content $packageJsonPath -Raw | ConvertFrom-Json
                $packageJson.version = "$(ReleaseVersion)"
                $packageJson | ConvertTo-Json -Depth 32 | Set-Content $packageJsonPath

                Write-Host "Updated package.json version to $(ReleaseVersion)"      
          
          - task: NodeTool@0
            displayName: 'Install Node.js $(nodeVersion)'
            inputs:
              versionSpec: '$(nodeVersion)'

          - task: Npm@1
            displayName: Install pnpm 
            inputs:
              command: custom
              verbose: false
              customCommand: 'install -g pnpm'

          - script: pnpm i
            displayName: 'Install dependencies'

          - script: pnpm run build
            displayName: 'Build'

          - task: PowerShell@2
            displayName: Create and push Git tag 
            inputs:
              targetType: inline
              script: |
                git config user.name "Mengsyue Amao Tsai"
                git config user.email "mengsyue.tsai@outlook.com"

                git fetch --tags 
                $tagName = "v$(ReleaseVersion)"

                $existingTags = git tag --list 
                if ($existingTags -contains $tagName) {
                  Write-Host "Tag $tagName already exists."
                  exit 0
                }

          - task: PowerShell@2
            displayName: Write authentication token to .npmrc
            inputs:
              targetType: inline
              script: |
                $token = "$(NpmToken)"
                $auth = "//registry.npmjs.org/:_authToken=$($token)"
                $npmrcPath = "$(System.DefaultWorkingDirectory)/.npmrc"
                Set-Content -Path $npmrcPath -Value $auth

          - script: pnpm publish --access public --no-git-checks
            displayName: Publish package to npm registry